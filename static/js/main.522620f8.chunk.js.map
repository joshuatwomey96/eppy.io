{"version":3,"sources":["components/Episode.js","App.js","registerServiceWorker.js","index.js"],"names":["_","require","Module","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","displayName","name","state","episodes","external","search","loading","value","test","label","key","backgroundPath","imdbID","imdbNotFound","handleChange","bind","assertThisInitialized","handleSubmit","renderSearch","dothis","inherits","createClass","_this2","fetch","concat","then","response","json","data","arr","newArr","i","results","push","id","setState","flatten","console","log","event","target","_this3","preventDefault","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","tvID","_response","_json","wrap","_context","prev","next","sent","imdb_id","stop","apply","arguments","request","_this4","contents","react_default","createElement","testClass","poster","renderPoster","text","renderText","renderPageTitle","className","onSubmit","Autocomplete_default","items","shouldItemRender","item","toLowerCase","indexOf","getItemValue","renderItem","highlighted","style","backgroundColor","inputProps","class","placeholder","onChange","onSelect","wrapperStyle","type","Fragment","href","lib_default","lockOrientation","lib","orientation","alwaysRender","marginBottom","marginTop","role","tv_results","bodyText","overview","originCountry","origin_country","originalLanguage","original_language","voteAverage","vote_average","firstAirDate","first_air_date","pageTitle","original_name","posterPath","poster_path","src","alt","border","hasOwnProperty","seasonNumber","parseInt","episodeNumber","averageRating","parseFloat","sortBy","graphGroups","groupBy","result","keys","map","table","flattenArr","sub","ep","flattenEp","primaryTitle","largest","length","size","dynLabels","dataSetsTest","fill","Math","random","toString","slice","labels","datasets","optionsBar","responsive","maintainAspectRatio","scales","xAxes","display","ticks","suggestedMin","beginAtZero","yAxes","legend","position","fullWidth","tooltips","callbacks","tooltipItem","dataset","datasetIndex","index","es","options","Component","App","Episode_Module","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","rootElement","document","getElementById","ReactDOM","render","BrowserRouter","App_App","URL","process","origin","addEventListener","status","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.522620f8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Bar, Line } from \"react-chartjs-2\";\r\nimport ReactAutocomplete from \"react-autocomplete\";\r\nimport DeviceOrientation, { Orientation } from \"react-screen-orientation\";\r\n\r\nvar _ = require(\"lodash\");\r\nconst key = \"dbc3d84ebffed258626dd3fc30a02bc4\";\r\n\r\nexport class Module extends Component {\r\n  displayName = Module.name;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      episodes: [],\r\n      external: [],\r\n      search: [],\r\n      loading: true,\r\n      value: \"\",\r\n      test: [{ label: \"loading...\" }],\r\n      key: \"\",\r\n      backgroundPath: \"\",\r\n      imdbID: \"\",\r\n      imdbNotFound: true\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.renderSearch = this.renderSearch.bind(this);\r\n    this.dothis = this.dothis.bind(this);\r\n  }\r\n\r\n  static renderText(external) {\r\n    if (external !== null || []) {\r\n      if (external.tv_results[0]) {\r\n        let bodyText = external.tv_results[0].overview;\r\n        let originCountry = external.tv_results[0].origin_country[0];\r\n        let originalLanguage = external.tv_results[0].original_language;\r\n        let voteAverage = external.tv_results[0].vote_average;\r\n        let firstAirDate = external.tv_results[0].first_air_date;\r\n        //let imdbId = this.state.imdbID\r\n        return (\r\n          <>\r\n            <p className=\"subtitle is-5\">\r\n              <b>Air Date: </b>\r\n              {firstAirDate}\r\n            </p>\r\n            <p className=\"subtitle is-5\">\r\n              <b>Origin: </b>\r\n              {originCountry}\r\n            </p>\r\n            <p className=\"subtitle is-5\">\r\n              <b>Language: </b>\r\n              {originalLanguage}\r\n            </p>\r\n            <p className=\"subtitle is-5\">\r\n              <b>Average Votes: </b>\r\n              {voteAverage}\r\n            </p>\r\n            <p className=\"subtitle is-5\">\r\n              <b>Synopse: </b>\r\n              {bodyText}\r\n            </p>\r\n          </>\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  renderSearch() {\r\n    fetch(\r\n      `https://api.themoviedb.org/3/search/tv?api_key=dbc3d84ebffed258626dd3fc30a02bc4&language=en-US&query=${\r\n      this.state.value\r\n      }&page=1`\r\n    )\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        let arr = this.state.search;\r\n        let newArr = [];\r\n        for (var i in arr.results) {\r\n          newArr.push({ label: arr.results[i].name, id: arr.results[i].id });\r\n        }\r\n        this.setState({ test: _.flatten(newArr) });\r\n        this.setState({ search: data });\r\n        console.log(this.state.search, this.state.test);\r\n      });\r\n  }\r\n\r\n  static renderPageTitle(external) {\r\n    if (external !== null || []) {\r\n      if (external.tv_results[0]) {\r\n        let pageTitle = external.tv_results[0].original_name;\r\n\r\n        return (\r\n          <>\r\n            <h1 className=\"subtitle is-4\">{pageTitle}</h1>\r\n          </>\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  static renderPoster(external) {\r\n    if (external !== null || []) {\r\n      if (external.tv_results[0]) {\r\n        let posterPath = external.tv_results[0].poster_path;\r\n        return (\r\n          <>\r\n            <img\r\n              src={`https://image.tmdb.org/t/p/w300${posterPath}`}\r\n              alt=\"...\"\r\n              style={{ border: \"5px solid #4a4a4a\" }}\r\n            />\r\n          </>\r\n        );\r\n      }\r\n      else {\r\n        return (\r\n          <>\r\n            <h2 className=\"subtitle\">No Poster :(</h2>\r\n          </>\r\n        );\r\n      }\r\n      let posterPath = external.tv_results[0].poster_path;\r\n      console.log(posterPath);\r\n    }\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({ value: event.target.value, loading: true, imdbNotFound: true });\r\n  }\r\n\r\n  dothis(event) {\r\n    this.setState({ value: event.target.value, loading: true, imdbNotFound: true });\r\n    this.renderSearch();\r\n    console.log(this.state.key);\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n\r\n    const request = async () => {\r\n      const response = await fetch(\r\n        `https://api.themoviedb.org/3/search/tv?api_key=dbc3d84ebffed258626dd3fc30a02bc4&language=en-US&query=${\r\n        this.state.value\r\n        }&page=1`\r\n      );\r\n      const json = await response.json();\r\n      console.log(json.results[0].id);\r\n      const tvID = json.results[0].id;\r\n      if (tvID) {\r\n        const response = await fetch(\r\n          `https://api.themoviedb.org/3/tv/${tvID}/external_ids?api_key=dbc3d84ebffed258626dd3fc30a02bc4&language=en-US`\r\n        );\r\n        const json = await response.json();\r\n        console.log(json.imdb_id);\r\n        const imdbID = json.imdb_id;\r\n        this.setState({\r\n          imdbID: json.imdb_id,\r\n        })\r\n        console.log(imdbID);\r\n        fetch(\r\n          `https://eppy-aa7fb.firebaseio.com/episode/episodeList.json?orderBy=%22parentTconst%22&equalTo=%22${imdbID}%22`\r\n        )\r\n          .then(response => response.json())\r\n          .then(data => {\r\n            this.setState({ episodes: data, loading: false, imdbNotFound: false });\r\n            console.log(data);\r\n          })\r\n          .then(\r\n            fetch(\r\n              `https://api.themoviedb.org/3/find/${imdbID}?api_key=${key}&language=en-US&external_source=imdb_id`\r\n            )\r\n              .then(response => response.json())\r\n              .then(data => {\r\n                this.setState({ external: data });\r\n                console.log(data);\r\n              })\r\n          );\r\n      }\r\n    };\r\n\r\n    request();\r\n  }\r\n\r\n  static testClass(episodes) {\r\n    let arr = [];\r\n\r\n    for (var key in episodes) {\r\n      if (episodes.hasOwnProperty(key)) {\r\n        arr.push(episodes[key]);\r\n      }\r\n    }\r\n    for (var i in arr) {\r\n      arr[i].seasonNumber = parseInt(arr[i].seasonNumber);\r\n      arr[i].episodeNumber = parseInt(arr[i].episodeNumber);\r\n      arr[i].averageRating = parseFloat(arr[i].averageRating);\r\n      console.log(arr[i]);\r\n    }\r\n    console.log(_.sortBy(arr, [\"seasonNumber\", \"episodeNumber\"]));\r\n\r\n    let graphGroups = _.groupBy(\r\n      _.sortBy(arr, [\"seasonNumber\", \"episodeNumber\"]),\r\n      \"seasonNumber\"\r\n    );\r\n\r\n    //reformat response object to array\r\n    var result = Object.keys(graphGroups).map(function (key) {\r\n      return [graphGroups[key]];\r\n    });\r\n\r\n    //reformat array -- this is the entire response\r\n    var flatten = _.flatten(result);\r\n    console.table(flatten);\r\n    console.log(\"flatten\");\r\n    //map response to new array only including the average rating\r\n    let flattenArr = flatten.map(function (sub) {\r\n      return sub.map(ep => ep.averageRating);\r\n    });\r\n\r\n    let flattenEp = flatten.map(function (sub) {\r\n      return sub.map(ep => ep.primaryTitle);\r\n    });\r\n    console.table(flattenEp);\r\n    console.log(\"flattenEp\");\r\n    //find largest amount of episodes\r\n    let largest = 0;\r\n\r\n    for (var i = 0; i < flatten.length; i++) {\r\n      if (_.size(flatten[i]) > largest) {\r\n        largest = _.size(flatten[i]);\r\n      }\r\n    }\r\n\r\n    //create the labels for the graph\r\n    var dynLabels = [];\r\n    for (var i = 1; i <= largest; i++) {\r\n      dynLabels.push(`Episode ${i}`);\r\n    }\r\n\r\n    //create the datasets for the graph\r\n    var dataSetsTest = [];\r\n    for (var i = 0; i < flattenArr.length; i++) {\r\n      dataSetsTest.push({\r\n        label: `Season ${i + 1}`,\r\n        data: flattenArr[i],\r\n        fill: false,\r\n        backgroundColor:\r\n          \"#\" +\r\n          Math.random()\r\n            .toString(16)\r\n            .slice(2, 8)\r\n      });\r\n    }\r\n\r\n    console.table(dataSetsTest);\r\n    //data object for the graph labels/datasets\r\n    const data = {\r\n      labels: dynLabels,\r\n      datasets: dataSetsTest\r\n    };\r\n\r\n    let optionsBar = {\r\n      responsive: true,\r\n      maintainAspectRatio: false,\r\n      scales: {\r\n        xAxes: [\r\n          {\r\n            display: true,\r\n            ticks: {\r\n              suggestedMin: 0, // minimum will be 0, unless there is a lower value.\r\n              // OR //\r\n              beginAtZero: true // minimum value will be 0.\r\n            }\r\n          }\r\n        ],\r\n        yAxes: [\r\n          {\r\n            display: true,\r\n            ticks: {\r\n              suggestedMin: 0, // minimum will be 0, unless there is a lower value.\r\n              // OR //\r\n              beginAtZero: true // minimum value will be 0.\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      legend: {\r\n        display: false,\r\n        position: \"left\",\r\n        fullWidth: true\r\n      },\r\n      tooltips: {\r\n        callbacks: {\r\n          label: function (tooltipItem, data) {\r\n            var dataset = data.datasets[tooltipItem.datasetIndex];\r\n            var index = tooltipItem.index;\r\n            return `${dataset.label} ${dataset.data[index]} ${\r\n              flattenEp[tooltipItem.datasetIndex][index]\r\n              }`;\r\n          }\r\n        }\r\n      }\r\n    };\r\n\r\n    //render the graph\r\n    return (\r\n      <>\r\n        <div className=\"columns\">\r\n          <div className=\"column is-full\">\r\n            <div className=\"wrapper\">\r\n              <Bar data={data} options={optionsBar} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"columns\">\r\n          <div className=\"column is-full\">\r\n            <div className=\"wrapper\">\r\n              <Line data={data} options={optionsBar} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    let contents = this.state.loading ? (\r\n      <p>\r\n        <em />\r\n      </p>\r\n    ) : (\r\n        Module.testClass(this.state.episodes)\r\n      );\r\n\r\n    let poster = this.state.loading ? (\r\n      <p>\r\n        <em />\r\n      </p>\r\n    ) : (\r\n        Module.renderPoster(this.state.external)\r\n      );\r\n\r\n    let text = this.state.loading ? (\r\n      <p>\r\n        <em />\r\n      </p>\r\n    ) : (\r\n        Module.renderText(this.state.external)\r\n      );\r\n\r\n    let title = this.state.loading ? (\r\n      <p>\r\n        <em />\r\n      </p>\r\n    ) : (\r\n        Module.renderPageTitle(this.state.external)\r\n      );\r\n\r\n    return (\r\n      <div>\r\n        <div>\r\n          <h1 className=\"title has-text-grey-dark\">eppy.io</h1>\r\n          <form onSubmit={this.handleSubmit}>\r\n            <div className=\"columns\">\r\n              <div className=\"column is-one-third\">\r\n                <ReactAutocomplete\r\n                  items={this.state.test}\r\n                  shouldItemRender={(item, value) =>\r\n                    item.label.toLowerCase().indexOf(value.toLowerCase()) > -1\r\n                  }\r\n                  getItemValue={item => item.label}\r\n                  renderItem={(item, highlighted) => (\r\n                    <div\r\n                      key={item.id}\r\n                      style={{\r\n                        backgroundColor: highlighted ? \"#eee\" : \"transparent\"\r\n                      }}\r\n                    >\r\n                      {item.label}\r\n                    </div>\r\n                  )}\r\n                  inputProps={{\r\n                    class: \"form-control\",\r\n                    placeholder: \"Try me out\"\r\n                  }}\r\n                  value={this.state.value}\r\n                  onChange={this.dothis}\r\n                  onSelect={value => this.setState({ value })}\r\n                  wrapperStyle={{}}\r\n                />\r\n              </div>\r\n              <div className=\"column\">\r\n                <input\r\n                  type=\"submit\"\r\n                  value=\"Submit\"\r\n                  className=\"button is-outlined is-primary\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </form>\r\n          {this.state.loading && this.state.imdbNotFound ? (\r\n            <div className=\"columns\">\r\n              <div className=\"column\">\r\n                <h2 className=\"subtitle\">\r\n                  Enter a TV show and click Submit to see the ratings.\r\n                </h2>\r\n              </div>\r\n            </div>\r\n          ) : (\r\n              <>\r\n                <div className=\"columns\">\r\n                  <div className=\"column is-narrow\">{poster}</div>\r\n                  <div className=\"column is-6\">{text}</div>\r\n                  <div className=\"column\">\r\n                    <a href={`https://www.imdb.com/title/${this.state.imdbID}`} className=\"subtitle\">Link to IMDb</a>\r\n                  </div>\r\n                </div>\r\n                <h2 className=\"subtitle\">\r\n                  <b>Series Trends</b>\r\n                </h2>\r\n                <DeviceOrientation lockOrientation={\"landscape\"}>\r\n                  {/* Will only be in DOM in landscape */}\r\n                  <Orientation orientation=\"landscape\" alwaysRender={false}>\r\n                    <div\r\n                      className=\"box\"\r\n                      style={{ marginBottom: \"30px\", marginTop: \"30px\" }}\r\n                    >\r\n                      {contents}\r\n                    </div>\r\n                  </Orientation>\r\n                  {/* Will stay in DOM, but is only visible in portrait */}\r\n                  <Orientation orientation=\"portrait\" alwaysRender={false}>\r\n                    <h2 className=\"subtitle\">\r\n                      If viewing on mobile please rotate your device.{\" \"}\r\n                      <span role=\"img\">😃</span>\r\n                    </h2>\r\n                  </Orientation>\r\n                </DeviceOrientation>\r\n              </>\r\n            )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Route } from 'react-router';\r\nimport { Module } from './components/Episode'\r\n\r\nexport default class App extends Component {\r\n  displayName = App.name\r\n\r\n  render() {\r\n    return (\r\n        <>\r\n          <Module/>\r\n        </>\r\n    );\r\n  }\r\n}\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import 'bootstrap/dist/css/bootstrap.css';\r\nimport './index.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\n/* const baseUrl = document.getElementsByTagName('base')[0].getAttribute('href');\r\n */const rootElement = document.getElementById('root');\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  rootElement);\r\n\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}